"""
Skrypt do uruchamiania serwer√≥w API Lista Obecno≈õci
"""
import subprocess
import sys
import os
import socket
import time

# Funkcja do sprawdzania, czy port jest ju≈º u≈ºywany
def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

# Funkcja do zatrzymywania procesu na okre≈õlonym porcie
def kill_process_on_port(port):
    try:
        # Dla Windows
        output = subprocess.check_output(f"netstat -ano | findstr :{port}", shell=True).decode()
        if output:
            # WyciƒÖgnij PID z outputu (ostatnia kolumna)
            lines = output.strip().split('\n')
            for line in lines:
                if f":{port}" in line and "LISTENING" in line:
                    pid = line.split()[-1]
                    print(f"‚ö†Ô∏è Port {port} jest ju≈º u≈ºywany przez proces o PID {pid}. Pr√≥bujƒô zatrzymaƒá...")
                    try:
                        subprocess.call(f"taskkill /F /PID {pid}", shell=True)
                        print(f"‚úÖ Proces na porcie {port} zosta≈Ç zatrzymany.")
                        # Daj czas na zwolnienie portu
                        time.sleep(1)
                        return True
                    except Exception as e:
                        print(f"‚ùå Nie mo≈ºna zatrzymaƒá procesu na porcie {port}: {e}")
                        return False
    except Exception:
        # Je≈õli nie znaleziono procesu lub wystƒÖpi≈Ç inny b≈ÇƒÖd
        return False
    return False

# Pr√≥ba importu centralnej konfiguracji
try:
    from configs.app_config import APP_PORT_MAIN, APP_PORT_ALT, APP_DEFAULT_IP, WEB_PANEL_PORT
    MAIN_PORT = APP_PORT_MAIN
    ALT_PORT = APP_PORT_ALT
    WEB_PORT = WEB_PANEL_PORT
    SERVER_IP = APP_DEFAULT_IP
    CENTRAL_CONFIG_LOADED = True
    print("Zaimportowano centralnƒÖ konfiguracjƒô z configs/app_config.py")
except ImportError:
    MAIN_PORT = 8000
    ALT_PORT = 8080
    WEB_PORT = 8002
    SERVER_IP = "192.168.1.35"
    CENTRAL_CONFIG_LOADED = False
    print("UWAGA: Nie mo≈ºna zaimportowaƒá centralnej konfiguracji z configs/app_config.py")
    print("U≈ºywam domy≈õlnych warto≈õci")

def start_servers():
    """
    Uruchamia g≈Ç√≥wny i alternatywny serwer API w oddzielnych procesach
    """
    print("===================================================")
    print("      Uruchamianie serwer√≥w API Lista Obecno≈õci     ")
    print("===================================================")
    
    # Sprawdzanie czy katalog static istnieje, je≈õli nie - utw√≥rz go
    if not os.path.exists("static"):
        os.makedirs("static")
        print("‚úÖ Utworzono brakujƒÖcy katalog 'static'")
    
    # Sprawd≈∫ czy porty sƒÖ ju≈º u≈ºywane i zatrzymaj procesy, je≈õli tak
    ports_to_check = [MAIN_PORT, ALT_PORT, WEB_PORT]
    for port in ports_to_check:
        if is_port_in_use(port):
            print(f"‚ö†Ô∏è Port {port} jest ju≈º u≈ºywany!")
            kill_process_on_port(port)
            # Sprawd≈∫ ponownie, czy port zosta≈Ç zwolniony
            if is_port_in_use(port):
                print(f"‚ùå Nie uda≈Ço siƒô zwolniƒá portu {port}. Spr√≥buj zatrzymaƒá procesy rƒôcznie.")
                print(f"   Mo≈ºesz u≈ºyƒá komendy: taskkill /F /FI \"WINDOWTITLE eq *python*\" /T")
                print(f"   lub: netstat -ano | findstr :{port}")
                input("Naci≈õnij Enter, aby kontynuowaƒá mimo to, lub Ctrl+C aby przerwaƒá...")
    
    # Uruchomienie g≈Ç√≥wnego serwera z dodatkowym parametrem dla debugowania
    try:
        main_server = subprocess.Popen([
            sys.executable, "-m", "uvicorn", "main:app",
            "--host", "0.0.0.0",
            "--port", str(MAIN_PORT),  # G≈Ç√≥wny port 8000
            "--log-level", "debug"  # Dodane pe≈Çne logowanie dla diagnostyki
        ])
        print(f"‚úÖ Uruchomiono g≈Ç√≥wny serwer na porcie {MAIN_PORT}")
        print(f"üì° Adres: http://{SERVER_IP}:{MAIN_PORT}")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas uruchamiania g≈Ç√≥wnego serwera: {str(e)}")
        main_server = None
    # Uruchomienie alternatywnego serwera
    try:
        alt_server = subprocess.Popen([sys.executable, "server_alt_port.py"])
        print(f"‚úÖ Uruchomiono alternatywny serwer na porcie {ALT_PORT}")
        print(f"üì° Adres: http://{SERVER_IP}:{ALT_PORT}")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas uruchamiania alternatywnego serwera: {str(e)}")
        alt_server = None
    
    # Uruchomienie serwera panelu webowego
    try:
        web_server = subprocess.Popen([
            sys.executable, "-m", "uvicorn", "main:app",
            "--host", "0.0.0.0",
            "--port", str(WEB_PORT)  # Rzutowanie na string, aby uniknƒÖƒá TypeError
            # Usuniƒôto opcjƒô --reload, aby zapobiec automatycznemu restartowi
        ])
        print(f"‚úÖ Uruchomiono serwer panelu webowego na porcie {WEB_PORT}")
        print(f"üì° Adres: http://{SERVER_IP}:{WEB_PORT}")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas uruchamiania serwera panelu webowego: {str(e)}")
        web_server = None
    print("\nüí° Serwery uruchomione! Pamiƒôtaj o konfiguracji firewalla.")
    print("üìÑ Zobacz plik FIREWALL_INSTRUKCJA.md aby dowiedzieƒá siƒô wiƒôcej.")
    
    if not CENTRAL_CONFIG_LOADED:
        print("\n‚ö†Ô∏è UWAGA: Centralna konfiguracja nie zosta≈Ça za≈Çadowana!")
        print("Mo≈ºesz napotkaƒá problemy z konfiguracjƒÖ aplikacji mobilnej.")
        print("Zalecane kroki:")
        print("1. Upewnij siƒô, ≈ºe katalog 'configs' istnieje")
        print("2. Sprawd≈∫ czy plik 'configs/app_config.py' jest dostƒôpny i poprawny")
        print("3. Uruchom ponownie serwery")
    
    print("\nNaci≈õnij Ctrl+C aby zatrzymaƒá wszystkie serwery...")
    
    try:
        # Czekaj na przerwanie przez u≈ºytkownika
        if main_server:
            main_server.wait()
        if alt_server:
            alt_server.wait()
        if web_server:
            web_server.wait()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Zatrzymywanie serwer√≥w...")
        if main_server:
            main_server.terminate()
        if alt_server:
            alt_server.terminate()
        if web_server:
            web_server.terminate()
        print("‚úÖ Serwery zatrzymane.")

if __name__ == "__main__":
    start_servers()
